/*
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Trade {
    #[serde(rename = "execution_id", skip_serializing_if = "Option::is_none")]
    pub execution_id: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<String>,
    #[serde(rename = "order_description", skip_serializing_if = "Option::is_none")]
    pub order_description: Option<String>,
    #[serde(rename = "trade_time", skip_serializing_if = "Option::is_none")]
    pub trade_time: Option<String>,
    #[serde(rename = "trade_time_r", skip_serializing_if = "Option::is_none")]
    pub trade_time_r: Option<f32>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    #[serde(rename = "submitter", skip_serializing_if = "Option::is_none")]
    pub submitter: Option<String>,
    #[serde(rename = "exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<String>,
    #[serde(rename = "comission", skip_serializing_if = "Option::is_none")]
    pub comission: Option<f32>,
    #[serde(rename = "net_amount", skip_serializing_if = "Option::is_none")]
    pub net_amount: Option<f32>,
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    #[serde(rename = "company_name", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    #[serde(rename = "contract_description_1", skip_serializing_if = "Option::is_none")]
    pub contract_description_1: Option<String>,
    #[serde(rename = "sec_type", skip_serializing_if = "Option::is_none")]
    pub sec_type: Option<String>,
    #[serde(rename = "conidex", skip_serializing_if = "Option::is_none")]
    pub conidex: Option<String>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<String>,
    #[serde(rename = "clearing_id", skip_serializing_if = "Option::is_none")]
    pub clearing_id: Option<String>,
    #[serde(rename = "clearing_name", skip_serializing_if = "Option::is_none")]
    pub clearing_name: Option<String>,
    /// User defined string used to identify the order. Value is set using \"cOID\" field while placing an order.
    #[serde(rename = "order_ref", skip_serializing_if = "Option::is_none")]
    pub order_ref: Option<String>,
}

impl Trade {
    pub fn new() -> Trade {
        Trade {
            execution_id: None,
            symbol: None,
            side: None,
            order_description: None,
            trade_time: None,
            trade_time_r: None,
            size: None,
            price: None,
            submitter: None,
            exchange: None,
            comission: None,
            net_amount: None,
            account: None,
            company_name: None,
            contract_description_1: None,
            sec_type: None,
            conidex: None,
            position: None,
            clearing_id: None,
            clearing_name: None,
            order_ref: None,
        }
    }
}


